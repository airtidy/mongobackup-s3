#!/bin/bash

function restore {
  aws s3api get-object --bucket $S3BUCKET --key $FILE thebackup
  tar -zxvf thebackup -C /backup
  echo "Applying backup to $MONGO_HOST:$MONGO_PORT"
  mongorestore --host $MONGO_HOST --port $MONGO_PORT dump/
  echo "Cleaning up..."
  rm -rf dump/ thebackup
}

if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  echo "AWS_ACCESS_KEY_ID must be set"
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  echo "AWS_SECRET_ACCESS_KEY must be set"
fi

if [ -z "$S3BUCKET" ]; then
  echo "S3BUCKET must be set"
fi

if [ -z "$DATEFORMAT" ]; then
  DATEFORMAT='%Y%m%d_%H%M%S'
fi

if [ -z "$FILEPREFIX" ]; then
  FILEPREFIX=''
fi

if [ -z "$MONGO_HOST" ]; then
  MONGO_HOST="mongo"
fi

if [ -z "$MONGO_PORT" ]; then
  MONGO_PORT="27017"
fi

if [ "$INIT_REPLSET" == "YES" ]; then
  echo "Initializing replica set..."
  sleep 30
  echo "Run rs.initiate()"
  mongo $MONGO_HOST/rocketchat --eval "rs.initiate()"
fi

if [[ -z "$CRONEXPR" ]]; then
  CRONEXPR="0 0 * * *"
fi

if [[ -z "$ROLLBACKUP_START_MIN_DELAY" ]]; then
  ROLLBACKUP_START_MIN_DELAY=3600
fi

#support for legacy env vars
if [[ -n "$MONGO_PORT_27017_TCP_ADDR" ]]; then
  MONGO_HOST=$MONGO_PORT_27017_TCP_ADDR
fi

if [[ -n "$MONGO_PORT_27017_TCP_PORT" ]]; then
  MONGO_PORT=$MONGO_PORT_27017_TCP_PORT
fi

if [[ -n "$DB" ]]; then
  DB_ARG="--db $DB"
fi


if [ "$1" == "backup" ]; then
  echo "Starting backup..."

  DATE=$(date +$DATEFORMAT)
  FILENAME=$FILEPREFIX$DATE.tar.gz
  FILE=thebackup
  

  mongodump --quiet -h $MONGO_HOST -p $MONGO_PORT $DB_ARG
  tar -zcvf $FILE dump/
  aws s3api put-object --bucket $S3BUCKET --key $FILENAME --body $FILE
  echo "Cleaning up..."
  rm -rf dump/ $FILE

elif [ "$1" == "rolling" ]; then

  sleep $ROLLBACKUP_START_MIN_DELAY

  echo "$CRONEXPR root cd /backup && ./run backup >> /var/log/cron.log 2>&1" > /etc/cron.d/backup-cron
  echo "" >> /etc/cron.d/backup-cron

  service rsyslog restart
  chmod 775 /var/log
  touch /var/log/cron.log

  cron && tail -f /var/log/cron.log

elif [ "$1" == "list" ]; then
  echo "Listing backups..."

  aws s3api list-objects --bucket $S3BUCKET --query 'Contents[].{Key: Key, Size: Size}' --output table
elif [ "$1" == "latest" ]; then
  echo "Determining backup to restore..."

  : ${FILE:=$(aws s3 ls s3://$S3BUCKET/$FILEPREFIX | awk -F " " '{print $4}' | sort -r | head -n1)}
  FILE=$FILEPREFIX$FILE
  echo "Restoring $FILE."
  restore
else
  echo "Starting restore"

  FILE=$1
  restore
fi
